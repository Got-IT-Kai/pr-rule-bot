plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
    id 'jvm-test-suite'
    id "org.sonarqube" version "6.3.1.5724"
}

group = 'com.code'
version = '0.0.1-SNAPSHOT'

sonar {
    properties {
        property "sonar.projectKey", "Got-IT-Kai_pr-rule-bot"
        property "sonar.organization", "got-it-kai"

        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/jacocoMergeReport/jacocoMergeReport.xml"

        // Exclude GitHub Actions SHA requirement for trusted actions
        property "sonar.issue.ignore.multicriteria", "e1"
        property "sonar.issue.ignore.multicriteria.e1.ruleKey", "githubactions:S7637"
        property "sonar.issue.ignore.multicriteria.e1.resourceKey", ".github/workflows/**"
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springAiVersion', "1.0.0")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.ai:spring-ai-advisors-vector-store'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.ai:spring-ai-starter-model-ollama'
    implementation 'org.springframework.ai:spring-ai-starter-model-vertex-ai-gemini'
    implementation 'io.projectreactor:reactor-core'
    implementation 'io.projectreactor.netty:reactor-netty-http'
    implementation 'com.knuddels:jtokkit:1.0.0'
    implementation 'io.grpc:grpc-netty-shaded:1.70.0'

    //implementation 'org.springframework.ai:spring-ai-starter-vector-store-chroma'

    implementation 'io.github.cdimascio:dotenv-java:2.3.2'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
    }
}

bootRun {
    jvmArgs += ["-javaagent:${project.rootDir}/otel/opentelemetry-javaagent.jar"]
}

testing {
    suites {
        test(JvmTestSuite) {
            useJUnitJupiter()
            dependencies {
                implementation 'org.springframework.boot:spring-boot-starter-test'
                implementation 'io.projectreactor:reactor-test'
                implementation 'org.mockito:mockito-inline:5.2.0'
                implementation 'io.projectreactor.tools:blockhound:1.0.8.RELEASE'
                implementation 'org.junit.platform:junit-platform-launcher'
            }
            targets.all {
                testTask.configure {
                    systemProperty 'blockhound.enabled', 'true'
                    jvmArgs += ['-XX:+EnableDynamicAgentLoading',
                                '-XX:+AllowRedefinitionToAddDeleteMethods']
                }
            }
        }

        integrationTest(JvmTestSuite) {
            useJUnitJupiter()
            dependencies {
                implementation project()
                implementation 'org.springframework.boot:spring-boot-starter-test'
                implementation 'io.projectreactor:reactor-test'
                implementation 'com.squareup.okhttp3:mockwebserver:4.12.0'
                implementation 'org.springframework:spring-webflux'
                implementation 'io.projectreactor.netty:reactor-netty-http'
            }
            targets.all {
                testTask.configure {
                    shouldRunAfter(tasks.named('test'))
                    systemProperty 'blockhound.enabled', 'false'
                    jvmArgs += ['-XX:+EnableDynamicAgentLoading', '-Xshare:off']
                }
            }
        }
    }
}

tasks.named("sonar") {
    dependsOn(tasks.named("jacocoMergeReport"))
}

tasks.named('check') {
    dependsOn tasks.named('integrationTest')
}

tasks.named('jacocoTestReport') {
    reports {
        xml.required = true
        html.required = true
    }
    dependsOn tasks.test
}

tasks.register('jacocoMergeReport', JacocoReport) {
    dependsOn(tasks.test, tasks.named('integrationTest'))

    executionData fileTree(dir: layout.buildDirectory.dir("jacoco"), include: ["*.exec"])

    sourceDirectories.setFrom files(sourceSets.main.allSource.srcDirs)
    classDirectories.setFrom files(sourceSets.main.output)

    reports {
        xml.required = true
        html.required = true
    }
}